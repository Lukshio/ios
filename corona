#!/bin/bash
POSIXLY_CORRECT=yes
INDEX=1

# nacitani vstupu

while [[ $# -gt 0 ]]; do
  case $1 in
  -h)
    echo "///////////////////////////////////////////////////////////////////////////////////////////////////////"
    echo "/////                ///////     ////     ////      ////      ///   //     ///                                         "
    echo "/////               ///       ///    ///  /////   ///   ///   // // //    /////                                                "
    echo "/////                ///////     ////     //   //    ////     //   ///  //    //                                          "
    echo "///////////////////////////////////////////////////////////////////////////////////////////////////////"
    echo "-----------------------------------------Napoveda-----------------------------------------------------"
    echo "Pouziti: ./corona [-h] [FILTERS] [COMMAND] [LOG [LOG2 [...]]"
    echo "----------"
    echo "COMMAND: infected | merge | gender | age | daily | monthly | yearly | countries | districts | regions"
    echo "infected — spočítá počet nakažených."
    echo "merge — sloučí několik souborů se záznamy do jednoho, zachovávající původní pořadí (hlavička bude ve výstupu jen jednou)."
    echo "gender — vypíše počet nakažených pro jednotlivá pohlaví."
    echo "age — vypíše statistiku počtu nakažených osob dle věku (bližší popis je níže)."
    echo "daily — vypíše statistiku nakažených osob pro jednotlivé dny."
    echo "monthly — vypíše statistiku nakažených osob pro jednotlivé měsíce."
    echo "yearly — vypíše statistiku nakažených osob pro jednotlivé roky."
    echo "countries — vypíše statistiku nakažených osob pro jednotlivé země nákazy (bez ČR, tj. kódu CZ)."
    echo "districts — vypíše statistiku nakažených osob pro jednotlivé okresy."
    echo "regions — vypíše statistiku nakažených osob pro jednotlivé kraje."
    echo "--------------"
    echo "FILTR: -a DATETIME [YYYY-MM-DD] | -B DATETIME [YYYY-MM-DD] | -g GENDER[M/Z] | -s [WIDTH]"
    echo "-a DATETIME — after: jsou uvažovány pouze záznamy PO tomto datu (včetně tohoto data). DATETIME je formátu YYYY-MM-DD."
    echo "-b DATETIME — before: jsou uvažovány pouze záznamy PŘED tímto datem (včetně tohoto data)."
    echo "-g GENDER — jsou uvažovány pouze záznamy nakažených osob daného pohlaví. GENDER může být M (muži) nebo Z (ženy)."
    echo "-s [WIDTH] u příkazů gender, age, daily, monthly, yearly, countries, districts a regions vypisuje data ne číselně, ale graficky v podobě histogramů "
    echo "Nepovinný parametr WIDTH nastavuje šířku histogramů, tedy délku nejdelšího řádku, na WIDTH. Pokud není parametr WIDTH uveden, řídí se šířky řádků požadavky uvedenými níže"
    echo "-----------------------------------------KONEC-----------------------------------------------------"
    exit 0
    shift
    ;;
  -a)
    FILTERS["$INDEX"]="$1"
    FILTERS_VALS["$INDEX"]="$2"
    INDEX+=1
    shift
    shift
    ;;
  -b)
    FILTERS["$INDEX"]="$1"
    FILTERS_VALS["$INDEX"]="$2"
    INDEX+=1
    shift
    shift
    ;;
  -g)
    FILTERS["$INDEX"]="$1"
    FILTERS_VALS["$INDEX"]="$2"
    INDEX+=1
    shift
    shift
    ;;
  -s)
    FILTERS["$INDEX"]="$1"
    FILTERS_VALS["$INDEX"]="$2"
    INDEX+=1
    shift
    shift
    ;;
  infected | merge | gender | age | countries | districts | regions | daily | monthly | yearly)
    COMMAND="$1"
    shift
    ;;
  *.csv)
    FILES+=("$1")
    shift
    ;;
  *.gz)
    FILES+=("$1")
    shift
    ;;
  *.bz2)
    FILES+=("$1")
    shift
    ;;
  -*)
    echo "Neznamy parametr $1"
    echo "-h pro napovedu"
    exit 1
    ;;
  *)
    echo "Neplatny vstup"
    echo "-h pro napovedu"
    exit 1
    ;;
  esac
done

# pokud neni zadany command, implicitne se dava merge
if [ "$COMMAND" == "" ]; then
  COMMAND="merge"
fi

#definice promennych
HEADER=0
TMP=""
FILTER_G=false
FILTER_G_VAL=""
FILTER_DATE_A=""
FILTER_DATE_B=""
FILTER_DATE_VAL_A=""
FILTER_DATE_VAL_B=""
PRINT_HISTOGRAM=false
HIST_VAL=0
INDEX=1
VALID=0

#kontrola a prirazovani filtru
if [ "$FILTERS" != 0 ]; then
  for filter in "${FILTERS[@]}"; do
    if [[ "$filter" == "-g" ]]; then
      FILTER_G=true
      if [ "${FILTERS_VALS[$INDEX]}" != "M" ] && [ "${FILTERS_VALS[$INDEX]}" != "Z" ]; then
        echo "Neplatny parametr pro prepinac -g povolene jsou M/Z" >"/dev/stderr"
        exit 1
      else
        FILTER_G_VAL=${FILTERS_VALS[$INDEX]}
      fi
    fi
    if [[ "$filter" == "-s" ]]; then
      PRINT_HISTOGRAM=true
      if ! [[ "${FILTERS_VALS[$INDEX]}" =~ ^[0-9,-]+$ ]]; then
        COMMAND=${FILTERS_VALS[$INDEX]}
      else
        if [ "${FILTERS_VALS[$INDEX]}" -lt 0 ]; then
          echo "WIDTH nemuze byt zaporna hodnota" >"/dev/stderr"
          exit 1
        fi
        HIST_VAL=${FILTERS_VALS[$INDEX]}
      fi
    fi
    if [[ "$filter" == "-a" ]] || [[ "$filter" == "-b" ]]; then
      if [[ "$filter" == "-a" ]]; then
        FILTER_DATE_A="$filter"
      elif [[ "$filter" == "-b" ]]; then
        FILTER_DATE_B="$filter"
      fi
      if [[ "${FILTERS_VALS[$INDEX]}" == "-"* ]]; then
        echo "Neplatny prepinac ${FILTERS_VALS[$INDEX]}"
        echo "Datum musi byt kladne cislo a ve formatu YYYY-MM-DD" >"/dev/stderr"
        exit 1
      fi
      if ! [[ "${FILTERS_VALS[$INDEX]}" =~ ^[0-9,-]+$ ]]; then
        echo "Datum musi byt kladne cislo ve formatu YYYY-MM-DD" >"/dev/stderr"
        exit 1
      else
        TMP=$(echo "${FILTERS_VALS[$INDEX]}" | awk '{
            split($1,x,"-")
            comp=x[1]x[2]x[3]
            if(x[1] < 1) exit 1
            if(x[2] < 1 || x[2] > 12){
              print "Neplatny mesic" > "/dev/stderr"
              exit 1
            }
            if(x[1] % 4 == 0 && (x[1] % 100 != 0 || x[1] % 400 == 0)){
              if(x[2] == 2 && x[3] > 29){
                print "Neplatny den" > "/dev/stderr"
                exit 1
              }
            }else{
              if(x[2] == 2 && x[3] > 28){
                print "Neplatny den" > "/dev/stderr"
                exit 1
              }
            }
            if((x[2] == 1 || x[2] == 3 || x[2] == 5 || x[2] == 7 || x[2] == 8 || x[2] == 10 || x[2] == 12) && x[3] > 31){
              print "Neplatny den" > "/dev/stderr"
              exit 1
            }
            if((x[2] == 4 || x[2] == 6 || x[2] == 9 || x[2] == 11) && x[3] > 30){
              print "Neplatny den" > "/dev/stderr"
              exit 1
            }
            print x[1]x[2]x[3]
          }')
        if [[ "$filter" == "-a" ]]; then
          FILTER_DATE_VAL_A=$TMP
        else
          FILTER_DATE_VAL_B=$TMP
        fi
      fi
    fi
    INDEX+=1
  done

fi

#nacitani hodnot ze souboru
load() {
  if [[ "$FILES" == "" ]]; then
    cat
  elif [ "$COMMAND" == "merge" ] || [ "$COMMAND" == "infected" ] || [ "$COMMAND" == "age" ]; then
    for file in "${FILES[@]}"; do
      (
        if [[ "$file" == *"gz" ]]; then
          zcat $file
        fi
        if [[ "$file" == *"bz2" ]]; then
          bzcat $file
        fi
        if [[ "$file" == *"csv" ]]; then
          cat $file
        fi
      )
    done
  else
    (
      if [[ "$FILES" == *"gz" ]]; then
        zcat $FILES
      fi
      if [[ "$FILES" == *"bz2" ]]; then
        bzcat $FILES
      fi
      if [[ "$FILES" == *"csv" ]]; then
        cat $FILES
      fi
    )
  fi
}

#filtry
filterGender() {
  if [ "$FILTER_G" == true ]; then
    if [ "$FILTER_G_VAL" == "M" ]; then
      awk -F ',' '$4 == "M" || $10 == 1'
    else
      awk -F ',' '$4 == "Z" && $10 != 1'
    fi
  else
    cat
  fi
}

#filtr dat
filterDateA() {
  if [ "$FILTER_DATE_A" == "-a" ]; then
    awk -F ',' -v date="$FILTER_DATE_VAL_A" '{
      split($2,x,"-")
      split(date,y,"-")
      date=y[1]y[2]y[3]
      comp=x[1]x[2]x[3]
      if(comp>=date || $2 == "datum") print
      }'
  else
    cat
  fi
}
filterDateB() {
  if [ "$FILTER_DATE_B" == "-b" ]; then
    awk -F ',' -v date="$FILTER_DATE_VAL_B" '{
      split($2,x,"-")
      split(date,y,"-")
      date=y[1]y[2]y[3]
      comp=x[1]x[2]x[3]
      if(comp<=date || $2 == "datum") print
      }'
  else
    cat
  fi
}

#overeni hodnot
Verify() {
  grep -v -e '^$' | awk \
    -F ',' \
    ' BEGIN{

  }{
  gsub(/ /,"")
      split($2,x,"-")
      if((0+x[2] <= 12 && 0+x[2] >= 1) || $2 == ""){
        if($3 ~ /^(\s*|[0-9]+)$/ || $3 ~ /^[0-9]+$/){
          print
        } else {
        print "Invalid age: "$0 > "/dev/stderr"
        }
      } else {
        if($3 != "vek" && ($1 ~ /^.+$/)) print "Invalid date: "$0> "/dev/stderr"
      }
}
  '
}

#tisk hlavicky
header() {
  awk \
    -F ',' \
    '
    BEGIN{print "id,datum,vek,pohlavi,kraj_nuts_kod,okres_lau_kod,nakaza_v_zahranici,nakaza_zeme_csu_kod,reportovano_khs"}{
    if($2 == "datum" && $10 != 1){
    } else {
      print
      }
    }END{

    }
    '
}
ROUND=0

#funkce na histogram
histogram() {
  awk \
    -F ':' \
    -v round="$ROUND" \
    -v filter_val="$HIST_VAL" \
    -v max=0 \
    -v base=0 \
    '{
  dates[$1]+=$2
    if($2 > max) max=$2
    if(filter_val != 0) {
      base=(max/filter_val)
    }
  } END {
    ORS=""
    for (date in dates){
      print date": "
      if(filter_val == 0){
        for(i = 0; i < (int(dates[date]/round)); i++){
          print "#"
        }
      } else {
        for(i = 0; i < (int(dates[date]*filter_val/max)); i++){
          print "#"
        }
      }
      print "\n"
    }
  }'
}

#shrnuti podfunkci do jedne aby se to lepe upravilo
init() {
  load | Verify | filterDateA | filterDateB | filterGender
}

#print headeru na vypisu
if [ "$COMMAND" == "" ] || [ "$COMMAND" == "merge" ]; then
  init | header
fi

if [ "$COMMAND" == "gender" ]; then
  init | header |
    awk \
      -F ',' \
      '
    {
      if($4 == "M") {
        counter++
      }
      if($4 == "Z") {
        counterZ++
      }
      if($4 == "") {
        counterNone++
      }
    }
    END{
    if(counter != 0)print "M: "counter
    if(counterZ != 0)print "Z: "counterZ
    if(counterNone != 0)print "None: "counterNone
    }' | if [ "$PRINT_HISTOGRAM" == true ]; then
    ROUND=100000
    histogram | sort
  else
    cat
  fi
fi

if [ "$COMMAND" == "districts" ]; then
  init |
    awk \
      -F ',' \
      '
    BEGIN{}{
      if($6 != "okres_lau_kod"){
        okresy[$6]+=1
      }
    }
    END{
    for (okres in okresy){
          if(okres == ""){
            printf("None: %d\n",okresy[okres])
          } else {
            printf("%s: %d\n", okres,okresy[okres])
          }
        }
    }' | if [ "$PRINT_HISTOGRAM" == true ]; then
    ROUND=1000
    histogram
  else
    cat
  fi | sort
fi

if [ "$COMMAND" == "regions" ]; then
  init |
    awk \
      -F ',' \
      '
    BEGIN{}{
      if($5 != "kraj_nuts_kod"){
        regions[$5]+=1
      }
    }
    END{
    for (region in regions){
          if(region == ""){
            printf("None: %d\n",regions[region])
          } else {
            printf("%s: %d\n", region,regions[region])
          }
        }
    }' | if [ "$PRINT_HISTOGRAM" == true ]; then
    ROUND=10000
    histogram
  else
    cat
  fi | sort
fi

if [ "$COMMAND" == "countries" ]; then
  init |
    awk \
      -F ',' \
      '
    BEGIN{}{
      if($8 != "" && $8 != "nakaza_zeme_csu_kod" && $8 != "CZ"){
        countries[$8]+=1
      }
    }
    END{
    for (country in countries){
          printf("%s: %d\n", country,countries[country])
        }
    }' | if [ "$PRINT_HISTOGRAM" == true ]; then
    ROUND=100
    histogram
  else
    cat
  fi | sort -V
fi

if [ "$COMMAND" == "infected" ]; then
  init | header |
    awk \
      -F ',' \
      '{
      if($2 != "datum"){
        counter++
      }
    }END{
      print counter
    }'
fi

if [ "$COMMAND" == "age" ]; then
  init |
    awk \
      -F ',' \
      -v print_histogram="$PRINT_HISTOGRAM" \
      -v filter_val="$HIST_VAL" \
      -v max=0 \
      -v base=0 \
      '
    function printH(title,val){
    ORS=""
    print title" "
      if(filter_val == 0){
        for(i = 0; i < (int(val/round)); i++){
          print "#"
        }
      }
      else {
        for(i = 0; i < (int(val/base)); i++){
          print "#"
        }
      }
      print "\n"
    }
    BEGIN{
    for (i = 0; i < 14; i++){
      data[i]=0
    }
    }{
      if($3 >= 0 && $3 <= 5) data[1]++
      if($3 >= 6 && $3 <= 15) data[2]++
      if($3 >= 16 && $3 <= 25) data[3]++
      if($3 >= 26 && $3 <= 35) data[4]++
      if($3 >= 36 && $3 <= 45) data[5]++
      if($3 >= 46 && $3 <= 55) data[6]++
      if($3 >= 56 && $3 <= 65) data[7]++
      if($3 >= 66 && $3 <= 75) data[8]++
      if($3 >= 76 && $3 <= 85) data[9]++
      if($3 >= 86 && $3 <= 95) data[10]++
      if($3 >= 96 && $3 <= 105) data[11]++
      if($3 > 105 && $3 != "vek") data[12]++
      if($3 == "") data[13]++

    }END{
    for (i = 0; i < 14; i++){
      if(data[i] > max) max=data[i]
    }
    if(filter_val != 0) base=(max/filter_val)
    if(print_histogram=="true"){
        printH("0-5   :",data[1])
        printH("6-15  :", data[2])
        printH("16-25 :", data[3])
        printH("26-35 :", data[4])
        printH("36-45 :", data[5])
        printH("46-55 :", data[6])
        printH("56-65 :", data[7])
        printH("66-75 :", data[8])
        printH("76-85 :", data[9])
        printH("86-95 :", data[10])
        printH("96-105:", data[11])
        printH(">105  :", data[12])
        if(data[13] != 0)printH("None  :", data[13])
      }
    else{
        print "0-5   :", data[1]
        print "6-15  :", data[2]
        print "16-25 :", data[3]
        print "26-35 :", data[4]
        print "36-45 :", data[5]
        print "46-55 :", data[6]
        print "56-65 :", data[7]
        print "66-75 :", data[8]
        print "76-85 :", data[9]
        print "86-95 :", data[10]
        print "96-105:", data[11]
        print ">105  :", data[12]
        if(data[13] != 0)print "None  :", data[13]
      }
    }'
fi

if [ "$COMMAND" == "daily" ]; then
  init |
    awk \
      -F ',' \
      '{
      if($2 != "datum"){
        dates[$2]+=1
      }
    }
    END{
    for (date in dates){
      if(date!=""){
        printf("%s: %d\n", date,dates[date])
      } else {
        printf("None: %d\n",dates[date])
      }
    }
    }' |
    if [ "$PRINT_HISTOGRAM" == true ]; then
      ROUND=500
      histogram
    else
      cat
    fi | sort -V
fi

if [ "$COMMAND" == "monthly" ]; then
  init |
    awk \
      -F ',' \
      '{
      if($2 != "datum"){
        split($2,a,"-")
        if($2!=""){
          dates[a[1]"-"a[2]]+=1
        } else {
          dates[a[1]a[2]]+=1
        }
      }
    }
    END{
    for (date in dates){
        if(date!=""){
          printf("%s: %d\n", date,dates[date])
        } else {
          printf("None: %d\n",dates[date])
        }
      }
    }' |
    if [ "$PRINT_HISTOGRAM" == true ]; then
      ROUND=10000
      histogram
    else
      cat
    fi | sort -V
fi
MAX=0
if [ "$COMMAND" == "yearly" ]; then
  init |
    awk \
      -F ',' \
      '{
      if($2 != "datum"){
        split($2,a,"-")
        dates[a[1]]+=1
      }
    }
    END{
    for (date in dates){
            if(date!=""){
              printf("%s: %d\n", date,dates[date])
            } else {
              printf("None: %d\n",dates[date])
            }
        }
    }' |
    if [ "$PRINT_HISTOGRAM" == true ]; then
      ROUND=100000
      histogram
    else
      cat
    fi | sort -V
fi
